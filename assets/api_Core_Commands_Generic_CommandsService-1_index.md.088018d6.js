import{_ as e,c as t,o as s,a as r}from"./app.1b042ac6.js";const u=JSON.parse('{"title":"CommandsService<TGroup> Class","description":"","frontmatter":{},"headers":[{"level":2,"title":"Type Parameters","slug":"type-parameters","link":"#type-parameters","children":[]},{"level":2,"title":"Constructors","slug":"constructors","link":"#constructors","children":[]},{"level":2,"title":"Properties","slug":"properties","link":"#properties","children":[]},{"level":2,"title":"Methods","slug":"methods","link":"#methods","children":[]}],"relativePath":"api/Core/Commands/Generic/CommandsService-1/index.md"}'),a={name:"api/Core/Commands/Generic/CommandsService-1/index.md"},o=r(`<h1 id="commandsservice-tgroup-class" tabindex="-1">CommandsService&lt;TGroup&gt; Class <a class="header-anchor" href="#commandsservice-tgroup-class" aria-hidden="true">#</a></h1><p><strong>Namespace:</strong> <a href="./../">EvoSC.Core.Commands.Generic</a><br><strong>Assembly:</strong> EvoSC#<br><strong>Assembly Version:</strong> 1.0.0</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CommandsService</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TGroup</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ICommandsService</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>Inheritance:</strong> object â†’ CommandsService&lt;TGroup&gt;</p><p><strong>Implements:</strong> <a href="./../../../../Interfaces/Commands/ICommandsService/">ICommandsService</a></p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a></h2><p><code>TGroup</code></p><h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-hidden="true">#</a></h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="./constructors/">CommandsService(IServiceProvider)</a></td><td></td></tr></tbody></table><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-hidden="true">#</a></h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="./properties/Commands.html">Commands</a></td><td></td></tr></tbody></table><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="./methods/ExecuteCommand.html">ExecuteCommand(ICommandContext, ICommandParserResult)</a></td><td></td></tr><tr><td><a href="./methods/GetCommand.html">GetCommand(string, string)</a></td><td></td></tr><tr><td><a href="./methods/RegisterCommands.html#registercommandstype">RegisterCommands(Type)</a></td><td></td></tr><tr><td><a href="./methods/RegisterCommands.html#registercommandst">RegisterCommands&lt;T&gt;()</a></td><td></td></tr><tr><td><a href="./methods/UnregisterCommands.html#unregistercommandstype">UnregisterCommands(Type)</a></td><td></td></tr><tr><td><a href="./methods/UnregisterCommands.html#unregistercommandst">UnregisterCommands&lt;T&gt;()</a></td><td></td></tr></tbody></table><hr><p><em>Documentation generated by <a href="https://github.com/ap0llo/mddocs" target="_blank" rel="noreferrer">MdDocs</a></em></p>`,15),n=[o];function d(m,c,l,i,p,h){return s(),t("div",null,n)}const g=e(a,[["render",d]]);export{u as __pageData,g as default};
