import{_ as e,o as t,c as a,S as o}from"./chunks/framework.f15d8f8c.js";const f=JSON.parse('{"title":"Themes","description":"","frontmatter":{},"headers":[],"relativePath":"development/modules/themes/introduction.md","filePath":"development/modules/themes/introduction.md"}'),n={name:"development/modules/themes/introduction.md"},s=o('<h1 id="themes" tabindex="-1">Themes <a class="header-anchor" href="#themes" aria-label="Permalink to &quot;Themes&quot;">​</a></h1><p>Theming is a concept that provides consistent style and colors throughout the UI. One can switch between different themes to get a different look and feel of the UI. EvoSC# implements a framework for creating themes and overriding default theme options.</p><p>Every module can implement their own default theme for their Manialinks, or override other default themes. This allows us to create a module that is purely made to be a theme.</p><h2 id="types-of-theme-implementations" tabindex="-1">Types of theme implementations <a class="header-anchor" href="#types-of-theme-implementations" aria-label="Permalink to &quot;Types of theme implementations&quot;">​</a></h2><p>There are two things a theme can implement, theme options and component replacements.</p><h3 id="theme-options" tabindex="-1">Theme Options <a class="header-anchor" href="#theme-options" aria-label="Permalink to &quot;Theme Options&quot;">​</a></h3><p>Theme options are arbitrary values that can be assigned to a key. These values can be used throughout anywhere in the module, and are always available in Manialinks as global variables.</p><h3 id="component-replacements" tabindex="-1">Component Replacements <a class="header-anchor" href="#component-replacements" aria-label="Permalink to &quot;Component Replacements&quot;">​</a></h3><p>It is also possible to replace an entire component from a theme. This is a very powerful system that can be used to not only change the look of a component, but also the behavior.</p><p>One should, however, be careful with how one replaces a component as it may break the other parts of the UI.</p>',10),i=[s];function r(h,m,l,p,c,d){return t(),a("div",null,i)}const _=e(n,[["render",r]]);export{f as __pageData,_ as default};
