import{_ as s,o as a,c as e,S as n}from"./chunks/framework.f15d8f8c.js";const F=JSON.parse('{"title":"Auditing","description":"","frontmatter":{},"headers":[],"relativePath":"development/modules/security/auditing.md","filePath":"development/modules/security/auditing.md"}'),o={name:"development/modules/security/auditing.md"},l=n(`<h1 id="auditing" tabindex="-1">Auditing <a class="header-anchor" href="#auditing" aria-label="Permalink to &quot;Auditing&quot;">​</a></h1><p>Audit logging refers to the process of recording actvities and events that has occured, along with any users who triggered such events and other detailed data about them. The purpose is to provide an audit trail that can be used for accountability, troubleshooting and security.</p><p>The difference between the audit logs and the normal logs which EvoSC# outputs is that the audit logs provides detailed information of activities and who did them, typically more granular than the output logs. You will be able to look back and see exactly what happened on your server.</p><p>Audit logging is viewed as a requirement for any action that requires a permission, and you will recieve a warning if there isn&#39;t any logging for a protected action. The audit logs in EvoSC# is much more structured and can even be viewed in-game.</p><p>In EvoSC#, audit logs are permanently stored in the database, but can also output them in the normal logs. EvoSC# provides an interface to easily set up and building an audit record.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Whenever a protected action or event occurs, it is <strong>highly recommended</strong> to create an audit record.</p></div><h2 id="creating-an-audit-for-a-protected-action" tabindex="-1">Creating an Audit for a Protected Action <a class="header-anchor" href="#creating-an-audit-for-a-protected-action" aria-label="Permalink to &quot;Creating an Audit for a Protected Action&quot;">​</a></h2><p>Let&#39;s say we have a command that performs some kind of moderation action, like kicking a player from the server. We set up our command in a controller:</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Controller</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExampleController2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EvoScController</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">CommandInteractionContext</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">ChatCommand</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">kick</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Kick a player</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">kickPlayerPermission</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ShowManialink</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// code to kick player ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>If you run this command, you will see a warning in the logs that we are missing audit logging. So how do we create a new audit record?</p><p>Every controller comes with a context for an event or action, and inside this context you will always have an <code>AuditEvent</code> property available. This property is an AuditEventBuilder that allows you to create a new audit record.</p><p>So let&#39;s create one:</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight has-focused-lines"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Controller</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExampleController2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EvoScController</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">CommandInteractionContext</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">ChatCommand</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">kick</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Kick a player</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">kickPlayerPermission</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">KickPlayerAsync</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#A6ACCD;">        Context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">AuditEvent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Success</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithEventName</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">PlayerKicked</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">HavingProperties</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Player </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> playerToKick</span><span style="color:#89DDFF;">})</span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Comment</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Player was kicked.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Here we are creating a new audit event that indicates the event was a success. Nextd, we provide a unique name to this event that is used to group and identify similar events.</p><p>Further, we provide detailed data that occured with the event, in this case the player that was kicked. We also set a comment for our audit, which is a user-friendly description of what happened and can be anything. The AuditEventBuilder class provides many more options to describe the events, which is described below.</p><p>One thing that is important is knowing who actually triggered this event. For all player interactions, EvoSC# will automatically assign the actor. You can also override or set this manually with the <code>CausedBy</code> method which accepts a <code>IPlayer</code> instance.</p><h2 id="auditing-in-services" tabindex="-1">Auditing in Services <a class="header-anchor" href="#auditing-in-services" aria-label="Permalink to &quot;Auditing in Services&quot;">​</a></h2><p>Because services are user-made and does not inherit action context by default, we have to do it slightly differently.</p><p>There is a scoped service of <code>IContextService</code> that holds the current context for the current action that occured. To gain access to this, you need to make sure that your service is also running on a Scoped lifestyle.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Before using <code>IContextService</code>, make sure your service has a Scoped lifestyle.</p></div><p><code>IContextService</code> exposes a <code>Audit()</code> method that can be used to access the AuditEvent of the current context. From this, the process for creating an audit is exactly the same as within a controller.</p><p>Let&#39;s give an example:</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">LifeStyle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ServiceLifeStyle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Scoped</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AdminActions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IAdminActions</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IContextService</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_context</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AdminActions</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IContextService</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">context</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        _context </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> context</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">KickPlayerAsync</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IPlayer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">playerToKick</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        _context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Audit</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Success</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithEventName</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">PlayerKicked</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">HavingProperties</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Player </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> playerToKick</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Comment</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Player was kicked.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="the-audit-service" tabindex="-1">The Audit Service <a class="header-anchor" href="#the-audit-service" aria-label="Permalink to &quot;The Audit Service&quot;">​</a></h2><p>The Audit Service <code>IAuditService</code> is what controls all creation and handling of audit events. It exposes several methods for creating a new events such as <code>NewEvent</code>, <code>NewSuccessEvent</code>, <code>NewErrorEvent</code> and <code>NewInfoEvent</code>. All of these methods returns an <code>AuditEventBuilder</code> that can be used to create a new audit record.</p><p>When using this service, audit records are not automatically created. But one can trigger the creation by calling the <code>LogAsync</code> method on the AuditEventBuilder instance.</p><h2 id="the-audit-event-builder" tabindex="-1">The Audit Event Builder <a class="header-anchor" href="#the-audit-event-builder" aria-label="Permalink to &quot;The Audit Event Builder&quot;">​</a></h2><p>The <code>AuditEventBuilder</code> is the main class for creating an new audit record. Here we will go over the different methods and what they can be used for.</p><h3 id="the-constructor" tabindex="-1">The Constructor <a class="header-anchor" href="#the-constructor" aria-label="Permalink to &quot;The Constructor&quot;">​</a></h3><p>The constructor always requires an instance of the <code>IAuditService</code>, which is used to create the actual record. You can also provide a name of the event. Most of the time, you will not need to instantiate the AuditEventBuilder yourself, but instead get an instance to work with.</p><h3 id="withstatus" tabindex="-1"><code>WithStatus</code> <a class="header-anchor" href="#withstatus" aria-label="Permalink to &quot;\`WithStatus\`&quot;">​</a></h3><p>The <code>WithStatus</code> method is used to set the status of the event. You can also set the status with the helper methods <code>Success()</code>, <code>Info()</code> and <code>Error()</code>.</p><h3 id="witheventname" tabindex="-1"><code>WithEventName</code> <a class="header-anchor" href="#witheventname" aria-label="Permalink to &quot;\`WithEventName\`&quot;">​</a></h3><p>The <code>WithEventName</code> method sets the unique name for the event. It should be alphanumeric and in PascalCase. A dot <code>.</code> can be used to group certain events together. The method also supports <a href="/development/modules/utility/enum-identifier.html">EnumIdentifier</a> for strongly typed audit events.</p><h3 id="havingproperties" tabindex="-1"><code>HavingProperties</code> <a class="header-anchor" href="#havingproperties" aria-label="Permalink to &quot;\`HavingProperties\`&quot;">​</a></h3><p><code>HavingProperties</code> is used to set additional details about an event. It accepts any kind of data, which is serialized into JSON when stored, so make sure your data is JSON serializable.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>When using <code>HavingProperties</code>, make sure the data you set can be serialized into JSON.</p></div><h3 id="causedby" tabindex="-1"><code>CausedBy</code> <a class="header-anchor" href="#causedby" aria-label="Permalink to &quot;\`CausedBy\`&quot;">​</a></h3><p><code>CausedBy</code> is used to set who actually did or triggered the event. This is very useful for moderation or admin actions, and allows you to see exactly who did what on the server.</p><h3 id="comment" tabindex="-1"><code>Comment</code> <a class="header-anchor" href="#comment" aria-label="Permalink to &quot;\`Comment\`&quot;">​</a></h3><p>You can set a user-friendly description for an event with the <code>Comment</code> method. It is recommended to keep this comment as short as possible.</p><h3 id="cancel-and-uncancel" tabindex="-1"><code>Cancel</code> and <code>UnCancel</code> <a class="header-anchor" href="#cancel-and-uncancel" aria-label="Permalink to &quot;\`Cancel\` and \`UnCancel\`&quot;">​</a></h3><p>If you, for some reason during an action, it is decided that one no longer need to create an audit record. You can call the <code>Cancel</code> method to not record the audit. The <code>UnCancel</code> method will allow the audit system to create the record again.</p>`,43),t=[l];function p(r,c,i,d,y,u){return a(),e("div",null,t)}const D=s(o,[["render",p]]);export{F as __pageData,D as default};
