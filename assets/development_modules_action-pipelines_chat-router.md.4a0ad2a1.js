import{_ as s,o as n,c as a,S as e}from"./chunks/framework.f15d8f8c.js";const A=JSON.parse('{"title":"Chat Router","description":"","frontmatter":{},"headers":[],"relativePath":"development/modules/action-pipelines/chat-router.md","filePath":"development/modules/action-pipelines/chat-router.md"}'),l={name:"development/modules/action-pipelines/chat-router.md"},p=e(`<h1 id="chat-router" tabindex="-1">Chat Router <a class="header-anchor" href="#chat-router" aria-label="Permalink to &quot;Chat Router&quot;">â€‹</a></h1><p>The chat router pipeline is responsible for processing incoming chat messages. If the pipeline reaches the end, the chat message is displayed in the in-game chat.</p><p>The pipeline context also allows modifying the message, so that we can create formatted chat messages, remove certain elements of the message and more.</p><p>To further explain the chat router, we will use an example where we create a profanity filter, which replaces cursing words in chat messages.</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Middleware</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">For</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> PipelineType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ChatRouter</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ProfanityFilterMiddleware</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ActionDelegate</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ProfanityFilterMiddleware</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">ActionDelegate</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">next</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        _next </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ExecuteAsync</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">ChatRouterPipelineContext</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">context</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MessageText </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MessageText</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Replace</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fuck</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">f**k</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_next</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>The process for creating a component for the chat router is exactly the same as controller actions, except for the pipeline type we use <code>PipelineType.ChatRouter</code> instead.</p><p>In the <code>ExecuteAsync</code> method, we pass a <code>ChatRouterPipelineContext</code>, which contains information about the chat message. In this case, we replace a curse word with it&#39;s censored version so that <code>fuck</code> is displayed as <code>f**k</code> in the chat.</p>`,7),o=[p];function t(c,r,i,y,D,C){return n(),a("div",null,o)}const h=s(l,[["render",t]]);export{A as __pageData,h as default};
