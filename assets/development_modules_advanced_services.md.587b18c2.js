import{_ as s,c as n,o as e,a}from"./app.4d2f09ba.js";const A=JSON.parse('{"title":"Module Services","description":"","frontmatter":{},"headers":[{"level":2,"title":"Defining a Module Service","slug":"defining-a-module-service","link":"#defining-a-module-service","children":[{"level":3,"title":"Example","slug":"example","link":"#example","children":[]}]},{"level":2,"title":"Background Services","slug":"background-services","link":"#background-services","children":[]}],"relativePath":"development/modules/advanced/services.md"}'),l={name:"development/modules/advanced/services.md"},p=a(`<h1 id="module-services" tabindex="-1">Module Services <a class="header-anchor" href="#module-services" aria-hidden="true">#</a></h1><p>Module services provides a way for modules to abstract away general and low level logic into methods. Since controllers are not stateful, services provides a way to keep state in memory between controller actions.</p><p>There are currently two types of lifetime supported for services, transient and singleton. The differences between these two are:</p><ul><li><strong>Transient:</strong> Instantiated every single time it is requested and cannot keep state.</li><li><strong>Singleton:</strong> Instantiated only one time the first time it is requested, it lives for the whole duration of the application and can keep state between requests.</li></ul><p>The general rule for lifetime management of services is that you should avoid singletons if possible. If you absolutely need to keep some kind of state in memory over a longer period and between requests, then singletons can be a great way to achieve this.</p><p>Singletons essentially acts as a background service and it is therefore important to know what type of resources must be freed upon disabling and unloading the module. Otherwise it can cause unexpected bugs to occur.</p><h2 id="defining-a-module-service" tabindex="-1">Defining a Module Service <a class="header-anchor" href="#defining-a-module-service" aria-hidden="true">#</a></h2><p>To create a module service, first create an interface for it. EvoSC will not accept services without an interface. This is because we want to follow the <a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle" target="_blank" rel="noreferrer">principle of dependency inversion</a>.</p><p>To let EvoSC know that you want to register a class as a service, annotate it with the <code>[Service]</code> attribute and specify the wanted lifetime.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h3><p>Let&#39;s go through an example to help understanding how to create module services.</p><p>We want to create a service that greets a player when they join the server. So let&#39;s start with creating the interface:</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IPlayerGreeterService</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    public </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SayHello</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">login</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>We then create the actual service implementation. Remember to annotate the <code>[Service]</code> attribute to let EvoSC know that we want to register this class as a service in the DI container.</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// no state is needed, so the lifetime should be transient</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">LifeStyle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ServiceLifeStyle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Transient</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PlayerGreeterService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IPlayerGreeterService</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IServerClient</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_server</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// we are injecting the server client so we can access the XMLRPC protocol for the server</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PlayerGreeterService</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IServerClient</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">server</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> _server </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> server</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SayHello</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">login</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">// get player info, which includes the nickname for us to greet</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">playerInfo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">await</span><span style="color:#A6ACCD;"> _server</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Remote</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetPlayerInfoAsync</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">login</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">// send a greeting to the player in the chat</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">await</span><span style="color:#A6ACCD;"> _server</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Remote</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ChatSendServerMessageAsync</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">$&quot;</span><span style="color:#C3E88D;">Welcome, </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">playerInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NickName</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>Since we don&#39;t keep state over for a longer time over multiple requests, we define the lifestyle as transient.</p><p>We can then create a controller and subscribe to the player connect event, which then calls the method from our service:</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Controller</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PlayerGreeterController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EvoScController</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IControllerContext</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IPlayerGreeterService</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_playerGreeter</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// inject our player greeter service</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PlayerGreeterController</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IPlayerGreeterService</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">playerGreeter</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        _playerGreeter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> playerGreeter</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Subscribe</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">GbxRemoteEvent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PlayerConnect</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OnPlayerConnect</span><span style="color:#89DDFF;">(object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sender</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PlayerConnectEventArgs</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">// greet the player that just joined!</span></span>
<span class="line"><span style="color:#A6ACCD;">        _playerGreeter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SayHello</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Login</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="background-services" tabindex="-1">Background Services <a class="header-anchor" href="#background-services" aria-hidden="true">#</a></h2><p>Background services are services are services that typically runs something in the background, in a separate thread. These services are instantiated automatically and executed.</p><p>Perhaps you need to manage a network connection, or have a timer that executes ever so often. Background services would be the perfect option for these cases.</p><p>These services are only executed once EvoSC# is ready and has established a connection with the game server and database. These services can also be used for graceful shutdown of background services to clean up any states.</p><p>To create a background service, begin by creating a normal service which implements the <code>IBackgroundService</code> interface:</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyBackgroundService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IBackgroundService</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StartAsync</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> Task</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">CompletedTask</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StopAsync</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> Task</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">CompletedTask</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>The interface exposes two methods, <code>StartAsync</code> and <code>StopAsync</code>. They are pretty self explainatory, but <code>StartAsync</code> is automatically called when the module is enabled, and <code>StopAsync</code> is called when the module is disabled. This allows you to both start and stop any background service that might be running for a module.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you wish to interact with the background service, do not try to inject this service. Instead, create a <em>singleton</em> service, that the background service controls with the Start/Stop methods. You can then interact with the background service anywhere by injecting this new singleton service.</p><p>Keep in mind that you will need to make sure the singleton service is thread safe.</p></div>`,26),o=[p];function r(t,c,i,y,C,D){return e(),n("div",null,o)}const d=s(l,[["render",r]]);export{A as __pageData,d as default};
