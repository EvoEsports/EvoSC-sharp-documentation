import{_ as e,o as a,c as s,S as l}from"./chunks/framework.f15d8f8c.js";const y=JSON.parse('{"title":"External Modules","description":"","frontmatter":{},"headers":[],"relativePath":"development/core/external-modules.md","filePath":"development/core/external-modules.md"}'),n={name:"development/core/external-modules.md"},o=l(`<h1 id="external-modules" tabindex="-1">External Modules <a class="header-anchor" href="#external-modules" aria-label="Permalink to &quot;External Modules&quot;">​</a></h1><p>External modules allow you to extend EvoSC# without modifying its core codebase. The process is similar to internal modules, with a few key differences.</p><h2 id="creating-a-new-external-module" tabindex="-1">Creating a New External Module <a class="header-anchor" href="#creating-a-new-external-module" aria-label="Permalink to &quot;Creating a New External Module&quot;">​</a></h2><p>All external modules are distributed as compiled <code>.dll</code> files and placed in it&#39;s own directory within the <code>modules</code> directory of your EvoSC# installation.</p><h3 id="step-1-the-project-module-class" tabindex="-1">Step 1: The Project &amp; Module Class <a class="header-anchor" href="#step-1-the-project-module-class" aria-label="Permalink to &quot;Step 1: The Project &amp; Module Class&quot;">​</a></h3><ol><li>Create a new <strong>Class Library</strong> project for your module.</li><li>Set the <strong>Root namespace</strong> to <code>EvoSC.Modules.&lt;Project Name&gt;</code>.</li><li>Target the <code>net8.0</code> framework.</li><li>Create your [development/modules/module-class](main module class), postfixed with <code>Module</code> (e.g., <code>PlayerModule</code>), and decorate it with the <code>[Module]</code> attribute.</li></ol><p>Example:</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Module</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PlayerModule</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EvoScModule</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="step-2-module-meta-information" tabindex="-1">Step 2: Module Meta Information <a class="header-anchor" href="#step-2-module-meta-information" aria-label="Permalink to &quot;Step 2: Module Meta Information&quot;">​</a></h3><p>Create an <code>info.toml</code> file in your project root with meta information about your module:</p><div class="language-toml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">info</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">PlayerModule</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Player Module</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">summary </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">A module for handling and managing players.</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">version </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">author </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Evo</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">dependencies</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Optional: List dependencies here</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="step-3-handling-dependencies" tabindex="-1">Step 3: Handling Dependencies <a class="header-anchor" href="#step-3-handling-dependencies" aria-label="Permalink to &quot;Step 3: Handling Dependencies&quot;">​</a></h3><p>If your module uses additional NuGet packages, you must merge all dependencies into a single <code>.dll</code> using <a href="https://github.com/gluck/il-repack" target="_blank" rel="noreferrer">ILRepack</a>. This ensures EvoSC# can load your module without missing dependencies.</p><p><strong>How to use ILRepack:</strong></p><ol><li>Build the module project.</li><li>Use ILRepack to merge your module <code>.dll</code> and all required dependency <code>.dll</code>s into one file.</li></ol><blockquote><p>[!NOTE] The binaries of a NuGet package may not appear in the build output of your project. You can usually find the location of the binaries within the NuGet cache directory, such as <code>%userprofile%\\. nuget\\packages</code> (windows) or <code>~/.nuget/packages</code> (linux/mac)</p></blockquote><p>Example command:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ilrepack /out:./merged/PlayerModule.dll PlayerModule.dll Dependency1.dll Dependency2.dll</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>[!WARNING] Don&#39;t pack EvoSC# binaries with the module. This will cause type conflicts when the module is loaded. EvoSC#&#39;s assemblies are automatically loaded with the module.</p></blockquote><h3 id="step-4-packaging-the-module" tabindex="-1">Step 4: Packaging the Module <a class="header-anchor" href="#step-4-packaging-the-module" aria-label="Permalink to &quot;Step 4: Packaging the Module&quot;">​</a></h3><ol><li>Create a directory inside the <code>modules</code> directory, named after your module (e.g., <code>modules/PlayerModule</code>).</li><li>Place your merged <code>.dll</code> and <code>info.toml</code> inside this directory.</li></ol><p>Directory structure:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">modules/</span></span>
<span class="line"><span style="color:#A6ACCD;">└─ PlayerModule/</span></span>
<span class="line"><span style="color:#A6ACCD;">   ├─ PlayerModule.dll</span></span>
<span class="line"><span style="color:#A6ACCD;">   └─ info.toml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="step-5-loading-the-module" tabindex="-1">Step 5: Loading the Module <a class="header-anchor" href="#step-5-loading-the-module" aria-label="Permalink to &quot;Step 5: Loading the Module&quot;">​</a></h3><p>EvoSC# will automatically detect and load external modules placed in the <code>modules</code> directory at startup.</p><hr><p>You can now begin developing your external module! For more details on module development, see the <a href="/development/modules/">Module Documentation</a>.</p>`,27),t=[o];function p(r,c,i,d,u,m){return a(),s("div",null,t)}const b=e(n,[["render",p]]);export{y as __pageData,b as default};
