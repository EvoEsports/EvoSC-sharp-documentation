import{_ as s,c as n,o as a,a as e}from"./app.1b042ac6.js";const l="/EvoSC-sharp-documentation/assets/magic-meme.fadfb197.gif",C=JSON.parse('{"title":"Module Settings & Configuration","description":"","frontmatter":{},"headers":[{"level":2,"title":"Defining Settings","slug":"defining-settings","link":"#defining-settings","children":[{"level":3,"title":"Sub Settings","slug":"sub-settings","link":"#sub-settings","children":[]}]},{"level":2,"title":"Accessing Settings","slug":"accessing-settings","link":"#accessing-settings","children":[]},{"level":2,"title":"Modifying Option Values","slug":"modifying-option-values","link":"#modifying-option-values","children":[]}],"relativePath":"development/modules/settings.md"}'),p={name:"development/modules/settings.md"},o=e(`<h1 id="module-settings-configuration" tabindex="-1">Module Settings &amp; Configuration <a class="header-anchor" href="#module-settings-configuration" aria-hidden="true">#</a></h1><p>EvoSC# utilizes <a href="https://github.com/aloneguid/config" target="_blank" rel="noreferrer">Config.Net</a> as the background handler for all configuration. A module&#39;s configuration is called settings, and it is saved in the database using a key-value approach.</p><h2 id="defining-settings" tabindex="-1">Defining Settings <a class="header-anchor" href="#defining-settings" aria-hidden="true">#</a></h2><p>To define settings, create an new interface. For example let&#39;s call our new settings for <code>IMySettings</code>.</p><p>We then create the new interface and annotate it with the <code>[Settings]</code> attribute:</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Settings</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IMySettings</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Option</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">DefaultValue</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">default value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    public </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyOption</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Inside this interface, we define all the options. As you can see, we can set a default value for an option using the <code>[Option]</code> attribute from <a href="https://github.com/aloneguid/config" target="_blank" rel="noreferrer">Config.Net</a>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Providing default values for options is not required, but it is recommended to always do this.</p></div><h3 id="sub-settings" tabindex="-1">Sub Settings <a class="header-anchor" href="#sub-settings" aria-hidden="true">#</a></h3><p>You can also create sub-settings, you do this by creating another interface just like the one in the example. However, <em>don&#39;t</em> annotate it with the <code>[Settings]</code> attribute.</p><p>To illustrate what I mean, check this example:</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// the root settings interface</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Settings</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IMySettings</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    public </span><span style="color:#FFCB6B;">IMySubSettings</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyOption</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// the subsettings, note that we are not annotating with [Settings] because we don&#39;t</span></span>
<span class="line"><span style="color:#676E95;">// want the application to add this as a root settings object</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IMySubSettings</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Option</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">DefaultValue</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">default value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    public </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyOption</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="accessing-settings" tabindex="-1">Accessing Settings <a class="header-anchor" href="#accessing-settings" aria-hidden="true">#</a></h2><p>Settings are added to the DI container. This means that we can access the settings object through dependency injection.</p><p>For example, imagine you need access to the settings in a controller:</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki has-focused-lines"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Controller</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExampleController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EvoScController</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IControllerContext</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ExampleController</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IMySettings</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mySettings</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line has-focus"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">// you can now access the options</span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">        Console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Log</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">mySettings</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MyOption</span><span style="color:#89DDFF;">);</span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="modifying-option-values" tabindex="-1">Modifying Option Values <a class="header-anchor" href="#modifying-option-values" aria-hidden="true">#</a></h2><p>The configuration system uses a set of tricks to hook into the setter and getter methods of the object properties. This allows us to abstract away all loading and saving logic from the developer.</p><p>When an option&#39;s value is requested, the application first check the value cache and if there is a cache miss, the value is retrieved from the database.</p><p>So when you set an option&#39;s value, the value is then automatically saved into the database. This means that all you need to do to save the value of an option is to simply set the property and you&#39;re done!</p><p>Example:</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">mySettings</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MyOption </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my new value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><details class="details custom-block"><summary>Details</summary><p><img src="`+l+'" alt="Reference Graph"></p></details>',24),t=[o];function c(r,i,y,u,d,D){return a(),n("div",null,t)}const h=s(p,[["render",c]]);export{C as __pageData,h as default};
