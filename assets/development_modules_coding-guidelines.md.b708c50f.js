import{_ as s,c as e,o as n,a}from"./app.4d2f09ba.js";const F=JSON.parse('{"title":"Introduction to the EvoSC# Module Framework","description":"","frontmatter":{},"headers":[{"level":2,"title":"Logic Abstraction Levels","slug":"logic-abstraction-levels","link":"#logic-abstraction-levels","children":[]},{"level":2,"title":"Services","slug":"services","link":"#services","children":[]},{"level":2,"title":"Unit Tests","slug":"unit-tests","link":"#unit-tests","children":[]},{"level":2,"title":"Avoid re-inventing the wheel","slug":"avoid-re-inventing-the-wheel","link":"#avoid-re-inventing-the-wheel","children":[]},{"level":2,"title":"Events","slug":"events","link":"#events","children":[]},{"level":2,"title":"Identifiers","slug":"identifiers","link":"#identifiers","children":[]},{"level":2,"title":"Localization","slug":"localization","link":"#localization","children":[{"level":3,"title":"Naming Conventions","slug":"naming-conventions","link":"#naming-conventions","children":[]}]},{"level":2,"title":"Auditing","slug":"auditing","link":"#auditing","children":[]}],"relativePath":"development/modules/coding-guidelines.md"}'),l={name:"development/modules/coding-guidelines.md"},o=a(`<h1 id="introduction-to-the-evosc-module-framework" tabindex="-1">Introduction to the EvoSC# Module Framework <a class="header-anchor" href="#introduction-to-the-evosc-module-framework" aria-hidden="true">#</a></h1><p>When developing modules there are a set of guidelines and rules one should follow so that everything is as consistent and maintainable as possible between all modules. This page introduces general concepts that one should follow when developing modules. More specific rules are typically explained in their respective sections.</p><h2 id="logic-abstraction-levels" tabindex="-1">Logic Abstraction Levels <a class="header-anchor" href="#logic-abstraction-levels" aria-hidden="true">#</a></h2><p>The code within a module have different levels of abstraction. For example, we try to avoid any logic in the main module class. And while controllers are meant to handle the logic, we also abstract lower level logic out of the controllers and put them in <a href="/development/modules/advanced/services.html">services</a>.</p><p>This helps with the test- and maintainability of the code, and it is easier to read and understand what is happening.</p><p>To give you a more concrete example, let&#39;s say you create a command to kick a player. You create the module class, we don&#39;t need to define anything in this class as we can define commands within a controller. Now imagine you created the controller class, and defined the method for the command.</p><p>Here is some examples of what we mean with abstracting the low level logic out of the controller:</p><p><strong>BAD:</strong></p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Controller</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EvoScController</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">CommandInteractionContext</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IServerClient</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_server</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyController</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IServerClient</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">server</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> _server </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> server</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">ChatCommand</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">kick</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Kicks a player.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">KickPlayerCommand</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IPlayer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">player</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">// don&#39;t put the &quot;raw logic&quot; here</span></span>
<span class="line highlighted error"><span style="color:#A6ACCD;">        _server</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Remote</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">KickAsync</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">PlayerUtils</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ConvertAccountIdToLogin</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">player</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">AccountId</span><span style="color:#89DDFF;">));</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>GOOD:</strong></p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Controller</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EvoScController</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">CommandInteractionContext</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IPlayerService</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_players</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyController</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IPlayerService</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">players</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> _players </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> players</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">ChatCommand</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">kick</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Kicks a player.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">KickPlayerCommand</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IPlayer</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">player</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">// Abstract the kick logic out of the controller and in a service</span></span>
<span class="line"><span style="color:#A6ACCD;">        _players</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">KickAsync</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">player</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="services" tabindex="-1">Services <a class="header-anchor" href="#services" aria-hidden="true">#</a></h2><p>Services should follow the <a href="https://en.wikipedia.org/wiki/Single-responsibility_principle" target="_blank" rel="noreferrer">Single Responsibility Principle</a>. If a service becomes huge with lots of dependencies, it is usually a sign that you might want to split it up.</p><p>Use the appropriate lifestyle for a service. Always use Transient if state or context is not needed.</p><h2 id="unit-tests" tabindex="-1">Unit Tests <a class="header-anchor" href="#unit-tests" aria-hidden="true">#</a></h2><p>As much of the code as possible within a module should also be covered by unit tests. We recommend using <a href="https://github.com/moq/moq4" target="_blank" rel="noreferrer">Moq 4</a> to mock objects for tests.</p><h2 id="avoid-re-inventing-the-wheel" tabindex="-1">Avoid re-inventing the wheel <a class="header-anchor" href="#avoid-re-inventing-the-wheel" aria-hidden="true">#</a></h2><p>The module framework and core already does a lot of things for you, and the chances are that you don&#39;t have to re-create a common function. For example, there are dedicated services and helpers for editing <a href="/development/modules/advanced/matchsettings.html">Match Settings</a> or building <a href="/development/modules/advanced/text-formatting.html">formatted chat messages</a>. Another example could be showing <a href="/development/modules/manialinks/introduction.html">Manialinks</a> to newly connected players is as simple as sending a persistent Manialink. Even sending <a href="/development/modules/advanced/server-chat-message.html">chat messages</a> are simplified.</p><p>Have a look around in the documentation and available classes to see what is possible!</p><h2 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-hidden="true">#</a></h2><p>It is recommended to fire events for actions or events that occur within a module, so that depending modules have a way to communicate.</p><h2 id="identifiers" tabindex="-1">Identifiers <a class="header-anchor" href="#identifiers" aria-hidden="true">#</a></h2><p>When creating names for things such as events, permissions or anything that require some kind of &quot;identifier&quot; that are used to reference the certain object or action. It is recommended to avoid using string literals.</p><p>Most of these functions have support for <a href="/development/modules/utility/enum-identifier.html">Enum Identifier</a>, so use this instead as much as possible. This is much more maintainable and less prone for error.</p><h2 id="localization" tabindex="-1">Localization <a class="header-anchor" href="#localization" aria-hidden="true">#</a></h2><p><a href="/development/modules/advanced/localization.html">Localization</a> should be used whenever possible to provide a consistent UX for players. It also makes it much easier to maintain and translate UI text.</p><h3 id="naming-conventions" tabindex="-1">Naming Conventions <a class="header-anchor" href="#naming-conventions" aria-hidden="true">#</a></h3><ul><li>Localization displayed in audits should be prefixed with <code>Audit.</code></li><li>Localization displayed in Manialinks should be prefixed with <code>UI.</code></li><li>Use alphanumeric names in PascalCase, and use <code>.</code> to denote locale categories and sub categories.</li><li>The name should be similar to the actual text displayed.</li></ul><h2 id="auditing" tabindex="-1">Auditing <a class="header-anchor" href="#auditing" aria-hidden="true">#</a></h2><p>Whenever a protected or sensitive action occurs, always create an <a href="/development/modules/security/auditing.html">audit record</a>.</p>`,30),t=[o];function p(r,i,c,d,h,y){return n(),e("div",null,t)}const D=s(l,[["render",p]]);export{F as __pageData,D as default};
